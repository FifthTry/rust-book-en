-- ft.doc-page:
toc: $ft.toc

-- ft.h1: Generics


We've already hinted at generics previously in the book, but never dug into
what exactly they are. You can always recognize when generics are used by
the way that they fit into Rust's syntax:

Any time you see angle brackets, `<>`, you're dealing with generics.

The types we've seen before like `Vec<i32>`? That's employing generics.  The
proper name for vectors is `Vec<T>`. That `T` is called a *type parameter*, and
it serves a similar function to parameters to functions: you give it some kind
of value, and that determines how it works. In the same way that a function
like `foo(x: i32)` can be called with `foo(5)`, a `Vec<T>` can be created with
a specific type, like `Vec<i32>`.

-- ft.h2: Generic data types


Let's dive into generic data types in a bit more detail. We previously learned
about the `Option<T>` type, but we never examined its definition. Let's try to
imagine how we'd write it. First, let's consider an option of a number:

-- ft.code:
lang: rust

enum OptionalNumber {
    Some(i32),
    None,
}

let number = OptionalNumber::Some(5);
let no_number = OptionalNumber::None;


-- ft.markdown:

This works just fine for `i32`s. But what if we also wanted to store `f64`s?
Or `String`s? We would have to write this:

-- ft.code:
lang: rust

enum OptionalFloatingPointNumber {
    Some(f64),
    None,
}

let number = OptionalFloatingPointNumber::Some(5.0);
let no_number = OptionalFloatingPointNumber::None;


-- ft.markdown:

The name is a bit long to drive the point home. With our current knowledge, we
would have to write a unique type for every single kind of option. In other
words, the idea of "an optional value" is a higher-order concept than any
specific type. We want it to work for any type at all.

-- ft.markdown:

We can do that with generics. In fact, that's how the actual option type works
in Rust. Let's check out its definition:

-- ft.code:
lang: rust

enum Option<T> {
    Some(T),
    None,
}


-- ft.markdown:

There's those angle brackets. If we were to read this definition aloud, we'd
say "`Option` is an `enum` with one type parameter, `T`. It has two variants:
`Some`, which has a value with type `T`, and `None`, which has no value." A
bit of a mouthful! But this will work with any type:

-- ft.code:
lang: rust

let integer = Option::Some(5);
let float = Option::Some(5.0);


-- ft.markdown:

We've left in the `Option` bit for consistency with the previous examples, but
since `Option<T>` is in the prelude, it's not needed:

-- ft.code:
lang: rust

let integer = Some(5);
let float = Some(5.0);


-- ft.markdown:

So, what's up with this syntax. Let's compare our two non-generic `enum`s side by
side:

-- ft.code:
lang: text

enum OptionalNumber {   enum OptionalFloatingPointNumber {
    Some(i32),              Some(f64),
    None,                   None,
}                       }


-- ft.markdown:

We have one line that's very close, but different: the `Some` bit. The only
difference is the type of the data, `i32` and `f64`. Just like we can
parameterize arguments to a function by choosing a name, we can parameterize
the type by choosing a name. In this case, `T`. We could choose any identifier
here, but traditionally, type parameters follow the same style as types
themselves: CamelCase. In addition, they tend to be short, often one letter.
`T` is the traditional choice, short for 'type'. So let's do that:

-- ft.code:
lang: text

enum OptionalNumber {   enum OptionalFloatingPointNumber {
    Some(T),                Some(T),
    None,                   None,
}                       }


-- ft.markdown:

We've replaced `i32` and `f64` with `T`. There's one problem, though: we've
*used* `T`, but not defined it. This would be similar to using an argument to
a function without declaring it. We need to tell Rust that we've introduced a
generic parameter. We can do that with the angle brackets, let's try it:

-- ft.code:
lang: text

enum OptionalNumber<T> {   enum OptionalFloatingPointNumber<T> {
    Some(T),                Some(T),
    None,                   None,
}                       }


-- ft.markdown:

The `<>`s indicate a list of type parameters, just like `()` indicates a
list of value parameters. Now, the only difference between our two `enum`s
is the name. And since we've made them generic, they're not specific to numbers
or floating point numbers. So let's give them the same name:

-- ft.code:
lang: text

enum Option<T> {	enum Option<T> {
    Some(T),                Some(T),
    None,                   None,
}                       }


-- ft.markdown:

Now they're identical! We've made our type fully generic. Understanding this
process is important, because the compiler actually does the exact opposite of
this when compiling your code. This is called *monomorphization*, and it's why
Rust's generics are extremely efficient. Consider this code:

-- ft.code:
lang: rust

\// This is in the standard library, but we're including it to make the example
\// a bit more obvious.
enum Option<T> {
    Some(T),
    None,
}

let integer = Some(5);
let float = Some(5.0);


-- ft.markdown:

When Rust compiles this code, it will perform monomorphization. What this means
is that the compiler will see that we've used two kinds of `Option<T>`: one
where `T` is `i32`, and one where `T` is `f64`. As such, it will expand the
generic definition of `Option<T>` into `Option<i32>` and `Option<f64>`, and
replace the calls with the specific versions. Like this:

-- ft.code:
lang: rust

enum OptionInteger {
    Some(i32),
    None,
}

enum OptionFloat {
    Some(f64),
    None,
}

let integer = OptionInteger::Some(5);
let float = OptionFloat::Some(5.0);


-- ft.markdown:

In other words, we can write the non-duplicated form, but Rust will act as
though we wrote the specific type out in each instance. This means that we
pay no runtime cost for using generics; it's just like we copy/pasted
each particular definition.

-- ft.markdown:

In a similar fashion, we can use `<>`s with structs as well:

-- ft.code:
lang: rust

struct Point<T> {
    x: T,
    y: T,
}

let integer = Point { x: 5, y: 10 };
let float = Point { x: 1.0, y: 4.0 };


-- ft.markdown:

The process is the same: add a `<T>` by the name, then put `T` in where the
type name goes.

-- ft.markdown:

If we need multiple type parameters, we can use a comma. Consider a universe in
which `x` and `y` need different types:

-- ft.code:
lang: rust

struct Point<X, Y> {
    x: X,
    y: Y,
}


-- ft.markdown:

Now `x` will have the type of `X`, and `y` will have the type of `Y`. We can
make `enum`s with multiple type parameters as well. Remember `Result<T, E>`
from the error handling chapter? Here's its definition:

-- ft.code:
lang: rust

enum Result<T, E> {
    Ok(T),
    Err(E),
}


-- ft.markdown:

Each variant stores a different kind of information, and they're both generic.
You can have as many type parameters as you'd like. Similarly to parameters of
values, if you have a lot of them, it can get quite confusing, so try to keep
the number of them small if you can.

-- ft.h2: Generic functions and methods


In a similar way to data structures, we can use the `<>` syntax to write
functions:

-- ft.code:
lang: rust

fn generic_function<T>(argument: T) {
    // code goes here
}


-- ft.markdown:

and methods:

-- ft.code:
lang: rust

struct Foo;

impl Foo {
    fn method<T>(argument: T) {
        // code goes here
    }
}


-- ft.markdown:

It's the same process: if we had these two functions:

-- ft.code:
lang: text

fn takes_integer(argument: i32) {       fn takes_float(argument: f64) {
    // code goes here                       // code goes here
}                                       }


-- ft.markdown:

We'd replace their parameter with `T`:

-- ft.code:
lang: text

fn takes_integer(argument: T) {       fn takes_float(argument: T) {
    // code goes here                       // code goes here
}                                       }


-- ft.markdown:

Add the `T` parameter to the type parameter list:

-- ft.code:
lang: text

fn takes_integer<T>(argument: T) {       fn takes_float<T>(argument: T) {
    // code goes here                       // code goes here
}                                       }


-- ft.markdown:

And then rename them to be the same:

-- ft.code:
lang: text

fn takes<T>(argument: T) {       fn takes<T>(argument: T) {
    // code goes here                // code goes here
}                                }


-- ft.markdown:

Now they're the same!

-- ft.markdown:

There's one problem though. We've got some function _definitions_ that work,
but if we try to do something with our argument, we'll get an error. To see
what we mean here, try out this function:

-- ft.code:
lang: rust,ignore

fn print<T>(argument: T) {
    println!("Got an argument: {}", argument);
}


-- ft.markdown:

You'll get an error that looks like this:

-- ft.code:
lang: text

	error trait bound `T: std::fmt::Display` is not satisfied
 --> <anon>:3:37
  |
3 |     println!("Got an argument: {}", argument);
  |                                     ^^^^^^^^ trait `T: std::fmt::Display` not satisfied
  |
  = help: consider adding a `where T: std::fmt::Display` bound
  = note: required by `std::fmt::Display::fmt`

error: aborting due to previous error(s)


-- ft.markdown:

This error mentions something we haven't learned about yet: traits. In the next
section, we'll figure out how to make this compile.
