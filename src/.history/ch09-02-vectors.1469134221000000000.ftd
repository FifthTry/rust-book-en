-- ft.doc-page:
toc: $ft.toc

-- ft.h1: Vectors


The first type we'll look at is `Vec<T>`, also known as a 'vector'. Vectors
allow you to store more than one value in a single data structure next to each
other in memory.

-- ft.h2: Creating a new vector


To create a new vector, you can call the `new` function:

-- ft.code:
lang: rust

let v: Vec<i32> = Vec::new();


-- ft.markdown:

You'll note that we added a type annotation here. Because we don't actually do
anything with the vector, Rust doesn't know what kind of elements we intend to
store. This is an important point. Vectors are homogenous: they may store many
values, but those values must all be the same type. Vectors are generic over
the type you store inside them, and the angle brackets here tell Rust that
this vector will hold elements of the `i32` type.

-- ft.markdown:

That said, in real code, you very rarely need to do this type annotation. Let's
insert some values to see this in action. To put elements in the vector, we can
use the `push` method:

-- ft.code:
lang: rust

let mut v = Vec::new();

v.push(5);
v.push(6);
v.push(7);
v.push(8);


-- ft.markdown:

Since these numbers are `i32`s, Rust can infer the type of the vector, so we
don't need the annotation. That said, creating a vector with some initial
values like this is very common, and so there's a macro to do it for us:

-- ft.code:
lang: rust

let v = vec![5, 6, 7, 8];


-- ft.markdown:

This macro does the exact same thing as our previous example, but it's much
more convenient.

-- ft.markdown:

How does this all work? Under the hood, vectors look approximately like this:

-- ft.code:
lang: rust,ignore

struct Vec<T> {
    data: &mut T,
    capacity: usize,
    length: usize,
}


-- ft.markdown:

This is not literally true, but will help you gain some intutions about it. The
actual representation is quite involved, and you can [read a chapter in the
Nomicon](https://doc.rust-lang.org/stable/nomicon/vec.html) for the full details.



-- ft.markdown:

At a high level, though, this is okay: a vector has a reference to some data,
a capacity, and a length. Let's go through these lines of code and see how
the vector changes.

-- ft.code:
lang: rust

let mut v = Vec::new();
# 
# v.push(5);
# v.push(6);
# v.push(7);
# v.push(8);


-- ft.markdown:

We've created our new vector. It will look like this:

-- ft.code:
lang: text

Vec<i32> {
    data: <invalid>,
    capacity: 0,
    length: 0,
}


-- ft.markdown:

We don't have anything stored yet, so the vector hasn't made any room for any
elements. Since we don't have any elements, `data` isn't valid either.

-- ft.code:
lang: rust

# let mut v = Vec::new();
# 
v.push(5);
# v.push(6);
# v.push(7);
# v.push(8);


-- ft.markdown:

Next, we insert one value into the vector. `push` looks at the current capacity
and length, and sees that there's no room for this `5` to go. Since there's
currently room for zero elements, it will request enough memory from the
operating system for a single element, and then copy `5` into that memory.  It
then updates the internal details, and now they look like this:

-- ft.code:
lang: text

struct Vec<T> {
    data: <address of first element>,
    capacity: 1,
    length: 1,
}


-- ft.markdown:

Our `data` now points to the start of this memory, and `capacity` and `length`
are both set to one. If they're both set to the same value, what's the
difference? We will see that shortly. But first, let's insert another value
into the vector:


-- ft.code:
lang: rust

# let mut v = Vec::new();
# 
# v.push(5);
v.push(6);
# v.push(7);
# v.push(8);


-- ft.markdown:

Same thing, we `push` a `6`. In this case, the same thing will happen:
`push` looks at the values of `capacity` and `len`, and sees that we don't have
room for a second element. So here's what it does: it requests room for twice
as many elements as we currently have. In this case, that means two elements.
Once it gets the memory it requested, the code in `push` copies the existing
element over into the new memory allocation then copies the `6` into the next
open slot. After updating the internal values, the vector now looks like this:

-- ft.code:
lang: text

struct Vec<T> {
    data: <address of first element>,
    capacity: 2,
    length: 2,
}


-- ft.markdown:

Our `capacity` and `length` both show two here. Let's try inserting another
element into the vector:

-- ft.code:
lang: rust

# let mut v = Vec::new();
# 
# v.push(5);
# v.push(6);
v.push(7);
# v.push(8);


-- ft.markdown:

Same story here: `push` looks and sees that our vector is full. However,
this time, something is slightly different. We currently have a capacity of
two elements, so the vector will request memory for double that number of
elements from the operating system: four. But why does it double every time?
We'll learn about that soon. For now, `push` will then copy the first two
elements over to the new memory, copy our `7` onto the end, and then update
the internal state. What's it look like now?

-- ft.code:
lang: text

struct Vec<T> {
    data: <address of first element>,
    capacity: 4,
    length: 3,
}


-- ft.markdown:

Ah ha! A difference. In essence, `capacity` tracks how much memory we've got
saved away for holding elements. `length` keeps track of how many elements we
are actually storing. Why not just allocate exactly as much as we need? In order
to get more heap memory, we have to talk to the operating system, and that
takes time. Not only that, but each time we get chunk of memory, we have to
copy the contents of the vector from the old memory to the new memory. So we
make a tradeoff: we request a bit more memory than we need, but in exchange,
we speed up the next few `push` operations.

-- ft.markdown:

We can see this speed the next time we call `push`:

-- ft.code:
lang: rust

# let mut v = Vec::new();
# 
# v.push(5);
# v.push(6);
v.push(7);
# v.push(8);


-- ft.markdown:

Now, `push` looks at the capacity versus the length: we have room for four
elements, but we only have three elements. Perfect! We skip that "request more
memory from the OS and copy everything" business and just copy the `7` into
the existing memory. After updating `capacity` and `len`, it looks like this:

-- ft.code:
lang: text

struct Vec<T> {
    data: <address of first element>,
    capacity: 4,
    length: 4,
}


-- ft.markdown:

We can do even better than this, though. While `new` allocates a new empty
vector, we can use `with_capacity` if we know how many things we're going to
insert:

-- ft.code:
lang: rust

let mut v = Vec::with_capacity(4);
# 
# v.push(5);
# v.push(6);
# v.push(7);
# v.push(8);


-- ft.markdown:

Here, our initial vector looks like this:

-- ft.code:
lang: text

struct Vec<T> {
    data: <invalid>,
    capacity: 4,
    length: 0,
}


-- ft.markdown:

Now, when we do our `push`es, we won't need to allocate until we `push` our
fifth element. The `vec!` macro uses a similar trick, so don't worry about it!

-- ft.h2: Destroying a vector


Like any other `struct`, a vector will be freed when it goes out of scope:

-- ft.code:
lang: rust

{
    let v = vec![1, 2, 3, 4];

    // do stuff with v

} // <- v goes out of scope and is freed here


-- ft.markdown:

When the vector gets dropped, it will also drop all of its contents, so those
integers are going to be taken care of as well. This may seem like a
straightforward point now, but can get a little more complicated once we start
to introduce references to the elements of the vector. Let's tackle that next!

-- ft.h2: Reading elements of vectors


Now that we know how to make vectors, knowing how to read their contents is a
good next step. There are two ways to reference a value stored in a vector.
We've annotated the types of the values that are returned from these functions
for extra clarity:

-- ft.code:
lang: rust

let v = vec![1, 2, 3, 4, 5];

let three: &i32 = &v[2];
let three: Option<&i32> = v.get(2);


-- ft.markdown:

First, note that we use `2` to get the third element: vectors are indexed by
number, starting at zero. Secondly, we have two different ways to do this:
using `&` and `[]`s and using a method, `get()`. The square brackets give us a
reference, and `get()` gives us an `Option<&T>`. Why two ways? Well, what
happens if we tried to do this:

-- ft.code:
lang: rust,should_panic

let v = vec![1, 2, 3, 4, 5];

let does_not_exist = &v[100];
let does_not_exist = v.get(100);


-- ft.markdown:

With the `[]`s, Rust will cause a `panic!`. With the `get` method, it will
instead return `None` without `panic!`ing. Remember that while `panic!`s will
cause your program to stop executing, they do not cause memory unsafety.

-- ft.markdown:

The borrow checker remains vigilant about references to the contents of the
vector and will make sure that everything stays valid. For example, here's
a case that looks okay, but actually isn't:

-- ft.code:
lang: rust,ignore

let mut v = vec![1, 2, 3, 4, 5];

let first = &v[0];

v.push(6);


-- ft.markdown:

This will give us this error:

-- ft.code:
lang: text

error: cannot borrow `v` as mutable because it is also borrowed as immutable [E0502]
v.push(6);
^
note: immutable borrow occurs here
let first = &v[0];
             ^
note: immutable borrow ends here
}
^
error: aborting due to previous error(s)


-- ft.markdown:

What's the matter here? Remember what can happen when we `push` to a vector: it
might have to go get more memory and copy all of the values to that new
memory. If it has to do this, our `first` would be pointing to old, invalid
memory!
