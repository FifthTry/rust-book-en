-- import: ft

-- ft.toc:
$processor$: toc

# The Rust Programming Language

# Getting started

- Introduction: /ch01-00-introduction/
  - Installation: /ch01-01-installation/
  - Hello, World!: /ch01-02-hello-world/

- Guessing Game Tutorial: /ch02-00-guessing-game-tutorial/

- Common Programming Concepts: /ch03-00-common-programming-concepts/
  - Variables and Mutability: /ch03-01-variables-and-mutability/
  - Data Types: /ch03-02-data-types/
  - How Functions Work: /ch03-03-how-functions-work/
  - Comments: /ch03-04-comments/
  - Control Flow: /ch03-05-control-flow/

- Understanding Ownership: /ch04-00-understanding-ownership/
  - What is Ownership?: /ch04-01-what-is-ownership/
  - References & Borrowing: /ch04-02-references-and-borrowing/
  - Slices: /ch04-03-slices/

- Structs: /ch05-00-structs/
  - Method Syntax: /ch05-01-method-syntax/

- Enums: /ch06-00-enums/
  - Option: /ch06-01-option/
  - Match: /ch06-02-match/
  - `if let`: /ch06-03-if-let/

# Basic Rust Literacy

- Modules: /ch07-00-modules/
  - `mod` and the Filesystem: /ch07-01-mod-and-the-filesystem/
  - Controlling Visibility with `pub`: /ch07-02-controlling-visibility-with-pub/
  - Importing Names with `use`: /ch07-03-importing-names-with-use/

- Fundamental Collections: /ch08-00-fundamental-collections/
  - Vectors: /ch08-01-vectors/
  - Strings: /ch08-02-strings/
  - Hash Maps: /ch08-03-hash-maps/

- Error Handling: /ch09-00-error-handling/
  - Unrecoverable Errors with `panic!`: /ch09-01-unrecoverable-errors-with-panic/
  - Recoverable Errors with `Result`: /ch09-02-recoverable-errors-with-result/
  - To `panic!` or Not To `panic!`: /ch09-03-to-panic-or-not-to-panic/

- Generics: /ch10-00-generics/
  - Syntax: /ch10-01-syntax/
  - Traits: /ch10-02-traits/
  - Lifetime syntax: /ch10-03-lifetime-syntax/

- Testing: /ch11-00-testing/
  - Writing tests: /ch11-01-writing-tests/
  - Running tests: /ch11-02-running-tests/
  - Test Organization: /ch11-03-test-organization/

- I/O: /
  - `Read` & `Write`: /
  - `std::fs`: /
  - `std::path`: /
  - `std::env`: /


# Thinking in Rust

- Thinking in Rust: /
  - Instead of Inheritance: /
  - Trait Objects?: /

- Creating a Library: /
  - Cargo: /
  - Crates.io: /
  - Organizing your Public API: /chYY-YY-public-api/
  - Documentation: /chYY-YY-documentation/
  - Workspaces and Multiple Related Crates: /chYY-YY-workspaces/

- Closures: /

- Zero-cost Abstractions: /
  - Iterators as a Case Study: /

- Smart Pointers: /
  - `Box<T>`: /
  - `Rc<T>`: /
  - `Cell`: /
  - `RefCell`: /
  - Interior Mutability: /

- Concurrency: /ch18-00-concurrency/
  - Threads: /
  - `Send` & `Sync`: /
  - `Arc<T>`: /
  - `Mutex<T>`: /
  - `Channels`: /

# Advanced Topics

- Patterns: /chXX-patterns/

- More Lifetimes: /

- Unsafe Rust: / (think about merging into the next chapter on advanced type system features
  - Raw Pointers: /
  - `transmute`: /

- Advanced Type System Features: / (perhaps called "Advanced Traits"?
  - Associated Types: /
  - UFCS: /
  - Coherence: /

- Macros: / (think about making little book of rust macros the authority on this topic
  - Writing Your Own Macros: /

- Appendix: /appendix-00/
  - Keywords: /appendix-01-keywords/
  - Operators: /appendix-02-operators/
  - Derivable Traits: /appendix-03-derivable-traits/
  - Nightly Rust: /appendix-04-nightly-rust/

