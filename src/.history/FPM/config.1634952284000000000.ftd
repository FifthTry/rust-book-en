-- import: ft

-- ft.toc:
$processor$: toc

# The Rust Programming Language

- The Rust Programming Language: /
- Foreword: /foreword/
- Introduction: /ch00-00-introduction/

# Getting started

- Getting Started: /ch01-00-getting-started/
  - Installation: /ch01-01-installation/
  - Hello, World!: /ch01-02-hello-world/
  - Hello, Cargo!: /ch01-03-hello-cargo/

- Programming a Guessing Game: /ch02-00-guessing-game-tutorial/

- Common Programming Concepts: /ch03-00-common-programming-concepts/
  - Variables and Mutability: /ch03-01-variables-and-mutability/
  - Data Types: /ch03-02-data-types/
  - Functions: /ch03-03-how-functions-work/
  - Comments: /ch03-04-comments/
  - Control Flow: /ch03-05-control-flow/

- Understanding Ownership: /ch04-00-understanding-ownership/
  - What is Ownership?: /ch04-01-what-is-ownership/
  - References and Borrowing: /ch04-02-references-and-borrowing/
  - The Slice Type: /ch04-03-slices/

- Using Structs to Structure Related Data: /ch05-00-structs/
  - Defining and Instantiating Structs: /ch05-01-defining-structs/
  - An Example Program Using Structs: /ch05-02-example-structs/
  - Method Syntax: /ch05-03-method-syntax/

- Enums and Pattern Matching: /ch06-00-enums/
  - Defining an Enum: /ch06-01-defining-an-enum/
  - The `match` Control Flow Operator: /ch06-02-match/
  - Concise Control Flow with `if let`: /ch06-03-if-let/

# Basic Rust Literacy

- Managing Growing Projects with Packages, Crates, and Modules: /ch07-00-managing-growing-projects-with-packages-crates-and-modules/
  - Packages and Crates: /ch07-01-packages-and-crates/
  - Defining Modules to Control Scope and Privacy: /ch07-02-defining-modules-to-control-scope-and-privacy/
  - Paths for Referring to an Item in the Module Tree: /ch07-03-paths-for-referring-to-an-item-in-the-module-tree/
  - Bringing Paths Into Scope with the `use` Keyword: /ch07-04-bringing-paths-into-scope-with-the-use-keyword/
  - Separating Modules into Different Files: /ch07-05-separating-modules-into-different-files/

- Common Collections: /ch08-00-common-collections/
  - Storing Lists of Values with Vectors: /ch08-01-vectors/
  - Storing UTF-8 Encoded Text with Strings: /ch08-02-strings/
  - Storing Keys with Associated Values in Hash Maps: /ch08-03-hash-maps/

- Error Handling: /ch09-00-error-handling/
  - Unrecoverable Errors with `panic!`: /ch09-01-unrecoverable-errors-with-panic/
  - Recoverable Errors with `Result`: /ch09-02-recoverable-errors-with-result/
  - To `panic!` or Not to `panic!`: /ch09-03-to-panic-or-not-to-panic/

- Generic Types, Traits, and Lifetimes: /ch10-00-generics/
  - Generic Data Types: /ch10-01-syntax/
  - Traits: Defining Shared Behavior: /ch10-02-traits/
  - Validating References with Lifetimes: /ch10-03-lifetime-syntax/

- Writing Automated Tests: /ch11-00-testing/
  - How to Write Tests: /ch11-01-writing-tests/
  - Controlling How Tests Are Run: /ch11-02-running-tests/
  - Test Organization: /ch11-03-test-organization/

- An I/O Project: Building a Command Line Program: /ch12-00-an-io-project/
  - Accepting Command Line Arguments: /ch12-01-accepting-command-line-arguments/
  - Reading a File: /ch12-02-reading-a-file/
  - Refactoring to Improve Modularity and Error Handling: /ch12-03-improving-error-handling-and-modularity/
  - Developing the Library’s Functionality with Test Driven Development: /ch12-04-testing-the-librarys-functionality/
  - Working with Environment Variables: /ch12-05-working-with-environment-variables/
  - Writing Error Messages to Standard Error Instead of Standard Output: /ch12-06-writing-to-stderr-instead-of-stdout/

# Thinking in Rust

- Functional Language Features: Iterators and Closures: /ch13-00-functional-features/
  - Closures: Anonymous Functions that Can Capture Their Environment: /ch13-01-closures/
  - Processing a Series of Items with Iterators: /ch13-02-iterators/
  - Improving Our I/O Project: /ch13-03-improving-our-io-project/
  - Comparing Performance: Loops vs. Iterators: /ch13-04-performance/

- More about Cargo and Crates.io: /ch14-00-more-about-cargo/
  - Customizing Builds with Release Profiles: /ch14-01-release-profiles/
  - Publishing a Crate to Crates.io: /ch14-02-publishing-to-crates-io/
  - Cargo Workspaces: /ch14-03-cargo-workspaces/
  - Installing Binaries from Crates.io with `cargo install`: /ch14-04-installing-binaries/
  - Extending Cargo with Custom Commands: /ch14-05-extending-cargo/

- Smart Pointers: /ch15-00-smart-pointers/
  - Using `Box<T>` to Point to Data on the Heap: /ch15-01-box/
  - Treating Smart Pointers Like Regular References with the `Deref` Trait: /ch15-02-deref/
  - Running Code on Cleanup with the `Drop` Trait: /ch15-03-drop/
  - `Rc<T>`, the Reference Counted Smart Pointer: /ch15-04-rc/
  - `RefCell<T>` and the Interior Mutability Pattern: /ch15-05-interior-mutability/
  - Reference Cycles Can Leak Memory: /ch15-06-reference-cycles/

- Fearless Concurrency: /ch16-00-concurrency/
  - Using Threads to Run Code Simultaneously: /ch16-01-threads/
  - Using Message Passing to Transfer Data Between Threads: /ch16-02-message-passing/
  - Shared-State Concurrency: /ch16-03-shared-state/
  - Extensible Concurrency with the `Sync` and `Send` Traits: /ch16-04-extensible-concurrency-sync-and-send/

- Object Oriented Programming Features of Rust: /ch17-00-oop/
  - Characteristics of Object-Oriented Languages: /ch17-01-what-is-oo/
  - Using Trait Objects That Allow for Values of Different Types: /ch17-02-trait-objects/
  - Implementing an Object-Oriented Design Pattern: /ch17-03-oo-design-patterns/

# Advanced Topics

- Patterns and Matching: /ch18-00-patterns/
  - All the Places Patterns Can Be Used: /ch18-01-all-the-places-for-patterns/
  - Refutability: Whether a Pattern Might Fail to Match: /ch18-02-refutability/
  - Pattern Syntax: /ch18-03-pattern-syntax/

- Advanced Features: /ch19-00-advanced-features/
  - Unsafe Rust: /ch19-01-unsafe-rust/
  - Advanced Traits: /ch19-03-advanced-traits/
  - Advanced Types: /ch19-04-advanced-types/
  - Advanced Functions and Closures: /ch19-05-advanced-functions-and-closures/
  - Macros: /ch19-06-macros/

- Final Project: Building a Multithreaded Web Server: /ch20-00-final-project-a-web-server/
  - Building a Single-Threaded Web Server: /ch20-01-single-threaded/
  - Turning Our Single-Threaded Server into a Multithreaded Server: /ch20-02-multithreaded/
  - Graceful Shutdown and Cleanup: /ch20-03-graceful-shutdown-and-cleanup/

- Appendix: /appendix-00/
  - A - Keywords: /appendix-01-keywords/
  - B - Operators and Symbols: /appendix-02-operators/
  - C - Derivable Traits: /appendix-03-derivable-traits/
  - D - Useful Development Tools: /appendix-04-useful-development-tools/
  - E - Editions: /appendix-05-editions/
  - F - Translations of the Book: /appendix-06-translation/
  - G - How Rust is Made and “Nightly Rust”: /appendix-07-nightly-rust/

