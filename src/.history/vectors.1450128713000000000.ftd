-- ft.doc-page:
toc: $ft.toc

-- ft.markdown:

% Vectors

-- ft.markdown:

A ‘vector’ is a dynamic or ‘growable’ array, implemented as the standard
library type [`Vec<T>`](../std/vec/index.html). The `T` means that we can have vectors
of any type (see the chapter on [generics](generics.html) for more).
Vectors always allocate their data on the heap.
You can create them with the `vec!` macro:

-- ft.code:
lang: rust

let v = vec![1, 2, 3, 4, 5]; // v: Vec<i32>


-- ft.markdown:

(Notice that unlike the `println!` macro we’ve used in the past, we use square
brackets `[]` with `vec!` macro. Rust allows you to use either in either situation,
this is just convention.)

-- ft.markdown:

There’s an alternate form of `vec!` for repeating an initial value:

-- ft.code:
lang: rust

let v = vec![0; 10]; // ten zeroes


-- ft.h2: Accessing elements


To get the value at a particular index in the vector, we use `[]`s:

-- ft.code:
lang: rust

let v = vec![1, 2, 3, 4, 5];

println!("The third element of v is {}", v[2]);


-- ft.markdown:

The indices count from `0`, so the third element is `v[2]`.

-- ft.markdown:

It’s also important to note that you must index with the `usize` type:

-- ft.code:
lang: ignore

let v = vec![1, 2, 3, 4, 5];

let i: usize = 0;
let j: i32 = 0;

\// works
v[i];

\// doesn’t
v[j];


-- ft.markdown:

Indexing with a non-`usize` type gives an error that looks like this:

-- ft.code:
lang: text

error: the trait `core::ops::Index<i32>` is not implemented for the type
`collections::vec::Vec<_>` [E0277]
v[j];
^~~~
note: the type `collections::vec::Vec<_>` cannot be indexed by `i32`
error: aborting due to previous error


-- ft.markdown:

There’s a lot of punctuation in that message, but the core of it makes sense:
you cannot index with an `i32`.

-- ft.h2: Iterating


Once you have a vector, you can iterate through its elements with `for`. There
are three versions:

-- ft.code:
lang: rust

let mut v = vec![1, 2, 3, 4, 5];

for i in &v {
    println!("A reference to {}", i);
}

for i in &mut v {
    println!("A mutable reference to {}", i);
}

for i in v {
    println!("Take ownership of the vector and its element {}", i);
}


-- ft.markdown:

Vectors have many more useful methods, which you can read about in [their
API documentation](../std/vec/index.html).
