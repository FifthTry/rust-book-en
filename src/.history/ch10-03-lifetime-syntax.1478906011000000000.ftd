-- ft.doc-page:
toc: $ft.toc

-- ft.h2: Lifetime Syntax


Generic type parameters let us abstract over types, and traits let us abstract
over a collection of methods. There's one more way that Rust allows us to do
something similar: *lifetimes* allow us to be generic over scopes of code.

Scopes of code? Yes, it's a bit unusual. Lifetimes are, in some ways, Rust's
most distinctive feature. They are a bit different than the tools you have used
in other programming languages. Lifetimes are a big topic, so we're not going
to cover everything about them in this chapter. What we *are* going to do is
talk about the very basics of lifetimes, so that when you see the syntax in
documentation or other places, you'll know what the syntax has to do with.
Chapter 20 will contain more advanced information about everything lifetimes
can do.

-- ft.h3: Core Syntax


We talked about references in Chapter 4, but we left out an important detail.
As it turns out, every reference in Rust has a *lifetime*, which is the scope
for which that reference is valid. Most of the time, lifetimes are implicit,
but just like we can choose to annotate types everywhere, we can choose to
annotate lifetimes.

Lifetimes have a slightly unusual syntax:

-- ft.code:
lang: rust,ignore

&i32 // a reference
&'a i32 // a reference with an explicit lifetime


-- ft.markdown:

The `'a` there is a *lifetime* with the name `a`. A single apostrophe indicates
that this name is for a lifetime. Lifetime names need to be declared before
they're used. Here's a function signature with lifetime declarations and
annotations:

-- ft.code:
lang: rust,ignore

fn lifetime<'a>(argument: &'a i32) {


-- ft.markdown:

Notice anything? In the same way that generic type declarations go inside angle
brackets after the function name, lifetime declarations also go inside those
same angle brackets. We can even write functions that take both:

-- ft.code:
lang: rust,ignore

fn lifetime<'a, T>(argument: &'a T) {


-- ft.markdown:

This function takes one argument, a reference to some type, `T`, and the
reference has the lifetime `'a`. In the same way that we parameterize functions
that take generic types, we parameterize references with lifetimes.

-- ft.markdown:

So, that's the syntax, but _why_? What does a lifetime do, anyway?

-- ft.h3: Lifetimes Prevent Dangling References


Consider the program in listing 10-8. There's an outer scope and an inner
scope. The outer scope declares a variable named `r` with no initial value, and
the inner scope declares a variable named `x` with the initial value of 5.
Inside the inner scope, we attempt to set the value of `r` to a reference to
`x`. Then the inner scope ends and we attempt to print out the value in `r`:

-- ft.code:
lang: rust,ignore

{
    let r;

    {
        let x = 5;
        r = &x;
    }

    println!("r: {}", r);
}


-- ft.markdown:

<caption>
Listing 10-8: An attempt to use a reference whose value has gone out of scope
</caption>

-- ft.markdown:

If we compile this code, we get an error:

-- ft.code:
lang: text

	error: `x` does not live long enough
  --> <anon>:6:10
   |
6  |     r = &x;
   |          ^ does not live long enough
7  | }
   | - borrowed value only lives until here
...
10 | }
   | - borrowed value needs to live until here


-- ft.markdown:

The variable `x` doesn't "live long enough." Why not? Well, `x` is going to go
out of scope when we hit the closing curly brace on line 7, ending the inner
scope. But `r` is valid for the outer scope; its scope is larger and we say
that it "lives longer." If Rust allowed this code to work, `r` would be
referencing memory that was deallocated when `x` went out of scope. That'd be
bad! Once it's deallocated, it's meaningless.

-- ft.markdown:

So how does Rust determine that this code should not be allowed? It compares
scopes. Here's the same example from Listing 10-8 with some annotations:

-- ft.code:
lang: rust,ignore

{
    let r;         // -------+-- 'a
                   //        |
    {              //        |
        let x = 5; // -+-----+-- 'b
        r = &x;    //  |     |
    }              // -+     |
                   //        |
    println!("r: {}", r); // |
                   //        |
                   // -------+
}


-- ft.markdown:

Here, we've annotated the lifetime of `r` with `'a` and the lifetime of `x`
with `'b`. Rust looks at these lifetimes and sees that `r` has a lifetime of
`'a`, but that it refers to something with a lifetime of `'b`. It rejects the
program because the lifetime `'b` is shorter than the lifetime of `'a`-- the
value that the reference is referring to does not live as long as the reference
does.

-- ft.markdown:

Let's look at a different example that compiles because it does not try to make
a dangling reference, and see what the lifetimes look like:

-- ft.code:
lang: rust

{
    let x = 5;            // -----+-- 'b
                          //      |
    let r = &x;           // --+--+-- 'a
                          //   |  |
    println!("r: {}", r); //   |  |
                          // --+  |
                          // -----+
}


-- ft.markdown:

Here, `x` lives for `'b`, which in this case is larger than `'a`. This is
allowed: Rust knows that the reference in `r` will always be valid, as it has a
smaller scope than `x`, the value it refers to.

-- ft.markdown:

Note that we didn't have to name any lifetimes in the code itself; Rust figured
it out for us. One situation in which Rust can't figure out the lifetimes for a
function or method is when one of the arguments is a reference, except for a
few scenarios we'll discuss in the lifetime elision section.

-- ft.markdown:

Another time that Rust can't figure out the lifetimes is when structs have a
field that holds a reference. In that case, naming the lifetimes looks like
this:

-- ft.code:
lang: rust

struct Ref<'a> {
    x: &'a i32,
}


-- ft.markdown:

Again, the lifetime names are declared in the angle brackets where generic type
parameters are declared, and this is because lifetimes are a form of generics.
In the examples above, `'a` and `'b` were concrete lifetimes: we knew about `r`
and `x` and how long they would live exactly. However, when we write a
function, we can't know beforehand exactly all of the arguments that it could
be called with and how long they will be valid for. We have to explain to Rust
what we expect the lifetime of the argument to be (we'll learn more about how
to know what you expect the lifetime to be in a bit). This is similar to
writing a function that has an argument of a generic type: we don't know what
type the arguments will actually end up being when the function gets called.
Lifetimes are the same idea, but they are generic over the scope of a
reference, rather than a type.

-- ft.h3: But Why?


So why do we need to declare lifetimes on functions, but not inside of them?
Here's our example from before:

-- ft.code:
lang: rust,ignore

{
    let r;

    {
        let x = 5;
        r = &x;
    }

    println!("r: {}", r);
}


-- ft.markdown:

Let's extract that inner block into a function. Remember, this code won't
compile yet.

-- ft.code:
lang: rust,ignore

fn foo() -> &i32 {
    let x = 5;

    &x
}

{
    let r = foo();

    println!("r: {}", r);
}


-- ft.markdown:

We get an error:

-- ft.code:
lang: text

	error lifetime specifier
 --> <anon>:2:17
  |
2 |     fn foo() -> &i32 {
  |                 ^ expected lifetime parameter
  |
  = help: this function's return type contains a borrowed value, but there is no value for it to be borrowed from
  = help: consider giving it a 'static lifetime


-- ft.markdown:

Rust wants us to put in a lifetime parameter. It also mentions something about
"a `'static` lifetime," but let's ignore that for now. We'll come back to it at
the end of the chapter.

-- ft.markdown:

Let's add a parameter. It won't quite fix it, but we get a different error:

-- ft.code:
lang: rust,ignore

fn foo<'a>() -> &'a i32 {
    let x = 5;

    &x
}

{
    let r = foo();

    println!("r: {}", r);
}


-- ft.markdown:

Here's the error:

-- ft.code:
lang: text

	error: `x` does not live long enough
 --> <anon>:5:6
  |
5 |     &x
  |      ^ does not live long enough
6 | }
  | - borrowed value only lives until here
  |
note: borrowed value must be valid for the lifetime 'a as defined on the block at 2:28...
 --> <anon>:2:29
  |
2 |     fn foo<'a>() -> &'a i32 {
  |                             ^


-- ft.markdown:

Now we have our "does not live long enough" error. What gives? Why does Rust
need this parameter in the first place? And why didn't adding this parameter
fix the error?

-- ft.markdown:

When we have code inside of a function, Rust can analyze that specific case.
There's only one thing to look at. But functions get called multiple times. So
it can't just be one, concrete case: you have to analyze everywhere that it's
called. Multiple, similar but different, scopes of code. So in the same way
that functions which take multiple types need type parameters, functions which
operate over different lifetimes need lifetime parameters. Think about it like this:

-- ft.code:
lang: rust,ignore

{
    let r;         // -------+-- We know that this lifetime starts exactly here...
                   //        |
    {              //        |
        let x = 5; //        |
        r = &x;    //        |
    }              //        |
                   //        |
    println!("r: {}", r); // |
                   //        |
                   // -------+-- ... and ends here.
}


-- ft.markdown:

But in this case:

-- ft.code:
lang: rust,ignore

fn foo<'a>() -> &'a i32 {
    let x = 5;

    &x
}

{
    let r1 = foo();         // -----+-- 'r1 starts here
                            //      |
    println!("r: {}", r1);  //      |
                            //      |
    let r2 = foo();         // --+--+-- 'r2 starts here
                            //   |  |
    println!("r2: {}", r1); //   |  |
                            // --+--+-- 'r2 ends
                            // -----+-- 'r1 ends
}


-- ft.markdown:

That parameter, `'a`, will represent `'r1` in the first case, and `'r2` in the
second. Two different scopes, one single parameter. Hence, generic, just like
two different types, one type parameter.

-- ft.h3: Two Lifetimes, Intertwined


To illustrate this principle a bit further, let's look at a function that takes
_two_ references:

-- ft.code:
lang: rust,ignore

fn foo(x: &i32, y: &i32) -> &i32 {


-- ft.markdown:

Which reference is the return value connected to? If the function looks
like this:

-- ft.code:
lang: rust,ignore

fn foo(x: &i32, y: &i32) -> &i32 {
    x
}


-- ft.markdown:

Then it's the first, but if it's like this:

-- ft.code:
lang: rust,ignore

fn foo(x: &i32, y: &i32) -> &i32 {
    y
}


-- ft.markdown:

Then it's the second.

-- ft.markdown:

This is what lifetime parameters give us control over. If we say

-- ft.code:
lang: rust,ignore

fn foo<'a>(x: &'a i32, y: &i32) -> &'a i32 {


-- ft.markdown:

Then we know that the return value's lifetime is tied to the lifetime of `x`.
And likewise:

-- ft.code:
lang: rust,ignore

fn foo<'a>(x: &i32, y: &'a i32) -> &'a i32 {


-- ft.markdown:

This lets us know that it's tied to the value of `y`. Ultimately, this is what
lifetime syntax is about: connecting the lifetimes of various parameters and
return values of functions, so that Rust can understand how long your
references are supposed to live.

-- ft.h3: Lifetime Elision


If every reference has a lifetime, and we need to provide them for functions
that take references, then why does this function compile?

-- ft.code:
lang: rust

fn do_nothing(x: &i32) -> &i32 {
    x
}


-- ft.markdown:

We haven't annotated any lifetime here, yet Rust happily compiles this function.

-- ft.markdown:

The answer here is historical: in ancient versions of pre-1.0 Rust, this would
not have compiled. Every reference needed an explicit lifetime. So this would
have to be written like this:

-- ft.code:
lang: rust

fn do_nothing<'a>(x: &'a i32) -> &'a i32 {
    x
}


-- ft.markdown:

However, after writing a lot of Rust code, some patterns developed. We noticed
that the vast majority of code followed these patterns. And being forced to use
explicit lifetime syntax on every reference wasn't a very great developer
experience.

-- ft.markdown:

To fix this, we developed the 'lifetime elision' rules. It's not full
inference: Rust doesn't try to guess what you meant, and then infer that. It's
a very basic set of patterns, and if they match, you don't need to write the
lifetimes explicitly. Here's the rules:

-- ft.markdown:

Lifetimes on function arguments are called "input lifetimes", and lifetimes on
return values are called "output lifetimes." With that in mind, there's one
rule related to input lifetimes:

-- ft.markdown:

* Each argument that needs a lifetime parameter gets its own. In other words,
  `fn foo<'a>(x: &'a i32)`, and `fn foo<'a, 'b>(x: &'a i32, y: &'b i32)`, and
  so on.

-- ft.markdown:

And two related to output lifetimes:

-- ft.markdown:

* If there is exactly one input lifetime parameter, that lifetime is assigned
  to all output lifetime parameters.
* If there are multiple input lifetime parameters, but one of them is `&self`
  or `&mut self`, then the lifetime of `self` is the lifetime assigned to all
  output lifetime parameters.

-- ft.markdown:

If none of these three rules apply, then you must explicitly annotate input and
output lifetimes.

-- ft.markdown:

These rules sound a little bit technical, and they are. But we've found that
they cover the vast majority of cases, allowing you to write a lot of code
without needing to consider explicit lifetimes. But it's not 100% of the time,
and so you may see explicit lifetimes used in various places.

-- ft.h3: The Static Lifetime


There is _one_ special lifetime that Rust knows about. Remember this program
from before?

-- ft.code:
lang: rust,ignore

fn foo() -> &i32 {
    let x = 5;

    &x
}


-- ft.markdown:

It gave us this help message:

-- ft.code:
lang: text

= help: consider giving it a 'static lifetime


-- ft.markdown:

As it turns out, `'static` is a special lifetime. It means "this reference
lasts for the entire duration of the program." Why would that matter? Well,
let's think about this function a bit more. We're trying to create a new
integer, and then return a reference to it. When the function is over, `x` is
going to go out of scope, and so this reference is dangling. The only way we
could possibly return a reference from a function with no parameters is if it
were alive before the function executed. Hence, `'static`.

-- ft.markdown:

As an example of the `'static` lifetime, string literals have one:

-- ft.code:
lang: rust

let s: &'static str = "I have a static lifetime.";


-- ft.markdown:

The text of this string is stored directly in the binary of your program,
therefore, it's always available, and so is `'static`.

-- ft.h2: Summary


We've covered the basics of Rust's system of generics. Generics are the core to
building good abstractions, and can be used in a number of ways. There's more
to learn about them, particularly lifetimes, but we'll cover those in later
chapters.
